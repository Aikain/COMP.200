@book{JamesFreeman2020PA2,
    author = {James Freeman and Fabio Alessandro Locati and Daniel Oh},
    abstract = {Leverage the power of Ansible to gain complete control over your systems and automate application deploymentKey FeaturesUse Ansible 2.9 to automate and control your infrastructure
Delve into advanced functionality such as plugins and custom modules in Ansible
Automate and orchestrate major cloud platforms such as OpenStack, AWS, and Azure using AnsibleBook DescriptionAnsible enables you to automate software provisioning, configuration management, and application roll-outs, and can be used as a deployment and orchestration tool. While Ansible provides simple yet powerful features to automate multi-layer environments using agentless communication, it can also solve other critical IT challenges, such as ensuring continuous integration and continuous deployment (CI/CD) with zero downtime.
In this book, you'll work with Ansible 2.9 and learn to solve complex issues quickly with the help of task-oriented scenarios. You'll start by installing and configuring Ansible on Linux and macOS to automate monotonous and repetitive IT tasks and get to grips with concepts such as playbooks, inventories, and network modules. As you progress, you'll gain insight into the YAML syntax and learn how to port between Ansible versions. In addition to this, you'll also understand how Ansible enables you to orchestrate multi-layer environments such as networks, containers, and the cloud.
By the end of this Ansible book, you'll be well - versed in writing playbooks and other related Ansible code to overcome just about all of your IT challenges, from infrastructure-as-code provisioning to application deployments, and even handling the mundane day-to-day maintenance tasks that take up so much valuable time.What you will learnBecome familiar with the fundamentals of the Ansible framework
Set up role-based variables and dependencies
Avoid common mistakes and pitfalls when writing automation code in Ansible
Extend Ansible by developing your own modules and plugins
Contribute to the Ansible project by submitting your own code
Follow best practices for working with cloud environment inventories
Troubleshoot issues triggered during Ansible playbook runsWho this book is forIf you are a DevOps engineer, administrator, or any IT professional looking to automate IT tasks using Ansible, this book is for you. Prior knowledge of Ansible is not necessary.},
    isbn = {9781789807462},
    language = {eng},
    publisher = {Packt Publishing},
    title = {Practical Ansible 2},
    year = {2020},
}

@article{RahmanAkond2021SSiA,
    author = {Rahman, Akond and Rahman, Md Rayhanur and Parnin, Chris and Williams, Laurie},
    abstract = {Context: Security smells are recurring coding patterns that are indicative of security weakness and require further inspection. As infrastructure as code (IaC) scripts, such as Ansible and Chef scripts, are used to provision cloud-based servers and systems at scale, security smells in IaC scripts could be used to enable malicious users to exploit vulnerabilities in the provisioned systems. Goal: The goal of this article is to help practitioners avoid insecure coding practices while developing infrastructure as code scripts through an empirical study of security smells in Ansible and Chef scripts. Methodology: We conduct a replication study where we apply qualitative analysis with 1,956 IaC scripts to identify security smells for IaC scripts written in two languages: Ansible and Chef. We construct a static analysis tool called Security Linter for Ansible and Chef scripts (SLAC) to automatically identify security smells in 50,323 scripts collected from 813 open source software repositories. We also submit bug reports for 1,000 randomly selected smell occurrences. Results: We identify two security smells not reported in prior work: missing default in case statement and no integrity check. By applying SLAC we identify 46,600 occurrences of security smells that include 7,849 hard-coded passwords. We observe agreement for 65 of the responded 94 bug reports, which suggests the relevance of security smells for Ansible and Chef scripts amongst practitioners. Conclusion: We observe security smells to be prevalent in Ansible and Chef scripts, similarly to that of the Puppet scripts. We recommend practitioners to rigorously inspect the presence of the identified security smells in Ansible and Chef scripts using (i) code review, and (ii) static analysis tools.},
    issn = {1049-331X},
    journal = {ACM transactions on software engineering and methodology},
    language = {eng},
    number = {1},
    pages = {1-31},
    title = {Security Smells in Ansible and Chef Scripts: A Replication Study},
    volume = {30},
    year = {2021},
}

@book{KiefMorris2020IaC2,
    author = {Kief Morris},
    abstract = {Six years ago, Infrastructure as Code was a new concept. Today, as even banks and other conservative organizations plan moves to the cloud, development teams for companies worldwide are attempting to build large infrastructure codebases. With this practical book, Kief Morris of ThoughtWorks shows you how to effectively use principles, practices, and patterns pioneered by DevOps teams to manage cloud-age infrastructure.Ideal for system administrators, infrastructure engineers, software developers, team leads, and architects, this updated edition demonstrates how you can exploit cloud and automation technology to make changes easily, safely, quickly, and responsibly. You'll learn how to define everything as code and apply software design and engineering practices to build your system from small, loosely coupled pieces.This book covers:Foundations:
Use Infrastructure as Code to drive continuous change and raise the bar of operational quality, using tools and technologies to build cloud-based platforms
Working with infrastructure stacks:
Learn how to define, provision, test, and continuously deliver changes to infrastructure resources
Working with servers and other platforms:
Use patterns to design provisioning and configuration of servers and clusters
Working with large systems and teams:
Learn workflows, governance, and architectural patterns to create and manage infrastructure elements},
    isbn = {9781098114664},
    language = {eng},
    publisher = {O'Reilly Media, Inc},
    title = {Infrastructure as Code, 2nd Edition},
    year = {2020},
}

@inproceedings{RahmanAkond2019TSSS,
    author = {Rahman, Akond and Parnin, Chris and Williams, Laurie},
    abstract = {Practitioners use infrastructure as code (IaC) scripts to provision servers and development environments. While developing IaC scripts, practitioners may inadvertently introduce security smells. Security smells are recurring coding patterns that are indicative of security weakness and can potentially lead to security breaches. The goal of this paper is to help practitioners avoid insecure coding practices while developing infrastructure as code (IaC) scripts through an empirical study of security smells in IaC scripts. We apply qualitative analysis on 1,726 IaC scripts to identify seven security smells. Next, we implement and validate a static analysis tool called Security Linter for Infrastructure as Code scripts (SLIC) to identify the occurrence of each smell in 15,232 IaC scripts collected from 293 open source repositories. We identify 21,201 occurrences of security smells that include 1,326 occurrences of hard-coded passwords. We submitted bug reports for 1,000 randomly-selected security smell occurrences. We obtain 212 responses to these bug reports, of which 148 occurrences were accepted by the development teams to be fixed. We observe security smells can have a long lifetime, e.g., a hard-coded secret can persist for as long as 98 months, with a median lifetime of 20 months.},
    booktitle = {2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
    copyright = {Copyright 2019 Elsevier B.V., All rights reserved.},
    isbn = {9781728108698},
    issn = {0270-5257},
    keywords = {devops ; devsecops ; empirical study ; Encoding ; infrastructure as code ; Password ; puppet ; security ; Servers ; smell ; Software ; Static analysis ; Tools},
    language = {eng},
    pages = {164-175},
    publisher = {IEEE},
    title = {The Seven Sins: Security Smells in Infrastructure as Code Scripts},
    volume = {2019-},
    year = {2019},
}

@article{MeylanAlexandre2020ASot,
    author = {Meylan, Alexandre and Cherubini, Mauro and Chapuis, Bertil and Humbert, Mathias and Bilogrevic, Igor and Huguenin, KÃ©vin},
    abstract = {App stores provide access to millions of different programs that users can download on their computers. Developers can also make their programs available for download on their websites and host the program files either directly on their website or on third-party platforms, such as mirrors. In the latter case, as users download the software without any vetting from the developers, they should take the necessary precautions to ensure that it is authentic. One way to accomplish this is to check that the published file's integrity verification code-the checksum-matches that (if provided) of the downloaded file. To date, however, there is little evidence to suggest that such a process is effective. Even worse, very few usability studies about it exist.
In this article, we provide the first comprehensive study that assesses the usability and effectiveness of the manual checksum verification process. First, by means of an in-situ experiment with 40 participants and eye-tracking technology, we show that the process is cumbersome and error-prone. Second, after a 4-monthlong in-the-wild experiment with 134 participants, we demonstrate how our proposed solution-a Chrome extension that verifies checksums automatically-significantly reduces human errors, improves coverage, and has only limited impact on usability. It also confirms that, sadly, only a tiny minority of websites that link to executable files in our sample provide checksums (0.01\%), which is a strong call to action for web standards bodies, service providers, and content creators to increase the use of file integrity verification on their properties.},
    address = {NEW YORK},
    copyright = {Copyright 2020 Elsevier B.V., All rights reserved.},
    issn = {2471-2566},
    journal = {ACM transactions on privacy and security},
    keywords = {Checksums ; Computer Science ; Computer Science, Information Systems ; Cryptography and Security ; Fisheries ; Human-Computer Interaction ; integrity ; Life Sciences & Biomedicine ; Networking and Internet Architecture ; Science & Technology ; security ; Technology ; usability ; Web ; web downloads},
    language = {eng},
    number = {1},
    pages = {1-36},
    publisher = {ASSOC COMPUTING MACHINERY},
    title = {A Study on the Use of Checksums for Integrity Verification of Web Downloads},
    volume = {24},
    year = {2020},
}

@online{AnsibleDocs,
    title = {Ansible Documentation},
    date = {2022-02-06},
    url = {https://docs.ansible.com/},
    urldate = {2022-02-06},
    langid = {english}
}

@online{Sha256sumManPage,
    author = {Ulrich Drepper, Scott Miller, David Madore},
    title = {sha256sum(1) - Linux man page},
    date = {2022-02-20},
    url = {https://linux.die.net/man/1/sha256sum},
    urldate = {2022-02-20},
    langid = {english},
}

@online{GithubAnsibleLint,
    title = {ansible-community/ansible-lint: Best practices checker for Ansible},
    date = {2022-03-20},
    url = {https://github.com/ansible-community/ansible-lint},
    urldate = {2022-03-20},
    langid = {english},
}

@online{AnsibleLintReadTheDocs,
    title = {Ansible Lint Documentation},
    date = {2022-03-20},
    url = {https://ansible-lint.readthedocs.io/en/latest/},
    urldate = {2022-03-20},
    langid = {english},
}

@incollection{SestoVincent2020ATaV,
    author = {Sesto, Vincent},
    address = {Berkeley, CA},
    booktitle = {Practical Ansible},
    copyright = {Vincent Sesto 2021},
    isbn = {1484264843},
    abstract = {Weâre almost at the end of our project and almost at the end of our book. We hope you keep working through this chapter because there are a lot of extra details we are going to provide you to hopefully make your life and work a little easier.},
    language = {eng},
    pages = {215-258},
    publisher = {Apress},
    title = {Ansible Tests and Variables},
    year = {2020},
}

@misc{alma9911268330505973,
    author = {Karvonen, Ville},
    copyright = {This publication is copyrighted. You may download, display and print it for Your own personal use. Commercial use is prohibited.},
    keywords = {kehitysympÃ¤ristÃ¶},
    language = {fin},
    organization = {Informaatioteknologian ja viestinnÃ¤n tiedekunta - Faculty of Information Technology and Communication Sciences},
    title = {Python-kehitysympÃ¤ristÃ¶n automatisointi},
    year = {2021},
}

@online{GitlabCICDDocs,
    title = {Gitlab CI/CD | Gitlab},
    date = {2022-03-20},
    url = {https://docs.gitlab.com/ee/ci/},
    urldate = {2022-03-20},
    langid = {english},
}

@article{KumaraIndika2021Tdad,
    abstract = {Infrastructure-as-code (IaC) is the DevOps tactic of managing and provisioning software infrastructures through machine-readable definition files, rather than manual hardware configuration or interactive configuration tools.
From a maintenance and evolution perspective, the topic has picked the interest of practitioners and academics alike, given the relative scarcity of supporting patterns and practices in the academic literature. At the same time, a considerable amount of gray literature exists on IaC. Thus we aim to characterize IaC and compile a catalog of best and bad practices for widely used IaC languages, all using gray literature materials.
In this paper, we systematically analyze the industrial gray literature on IaC, such as blog posts, tutorials, white papers using qualitative analysis techniques.
We proposed a definition for IaC and distilled a broad catalog summarized in a taxonomy consisting of 10 and 4 primary categories for best practices and bad practices, respectively, both language-agnostic and language-specific ones, for three IaC languages, namely Ansible, Puppet, and Chef. The practices reflect implementation issues, design issues, and the violation of/adherence to the essential principles of IaC.
Our findings reveal critical insights concerning the top languages as well as the best practices adopted by practitioners to address (some of) those challenges. We evidence that the field of development and maintenance IaC is in its infancy and deserves further attention.
â¢A gray literature review on the state of the practice in the adoption of IaC.â¢A broad catalog consisting of a taxonomy of best and bad practices.â¢A comparison with IaC practices reported in the existing academic literature.},
    author = {Kumara, Indika and Garriga, MartÃ­n and Romeu, Angel Urbano and Di Nucci, Dario and Palomba, Fabio and Tamburri, Damian Andrew and van den Heuvel, Willem-Jan},
    address = {AMSTERDAM},
    copyright = {2021 The Author(s)},
    issn = {0950-5849},
    journal = {Information and software technology},
    keywords = {Computer Science ; Computer Science, Information Systems ; Computer Science, Software Engineering ; DevOps ; Gray literature review ; Grey literature review ; Infrastructure-as-code ; Science & Technology ; Technology},
    language = {eng},
    pages = {106593-},
    publisher = {Elsevier B.V},
    title = {The doâs and donâts of infrastructure code: A systematic gray literature review},
    volume = {137},
    year = {2021},
}
